[{"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\reportWebVitals.js":"1","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\App.js":"2","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\index.js":"3","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\MenuComponent.js":"4","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\dishes.js":"5","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\DishDetailComponent.js":"6","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\MainComponent.js":"7","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\FooterComponent.js":"9","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\ContactComponent.js":"10","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\comments.js":"11","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\HomeComponent.js":"12","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\promotions.js":"13","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\AboutComponent.js":"14","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\configureStore.js":"15","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\leaders.js":"16","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\dishes.js":"17","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\comments.js":"18","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\ActionTypes.js":"19","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\ActionCreators.js":"20","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\leaders.js":"21","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\forms.js":"22","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\promotions.js":"23","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\baseUrl.js":"24"},{"size":362,"mtime":1610611330283,"results":"25","hashOfConfig":"26"},{"size":399,"mtime":1610775985172,"results":"27","hashOfConfig":"26"},{"size":642,"mtime":1610766903434,"results":"28","hashOfConfig":"26"},{"size":3263,"mtime":1611041260020,"results":"29","hashOfConfig":"26"},{"size":1490,"mtime":1610777176380,"results":"30","hashOfConfig":"26"},{"size":8492,"mtime":1611049807799,"results":"31","hashOfConfig":"26"},{"size":7507,"mtime":1611051061552,"results":"32","hashOfConfig":"26"},{"size":5711,"mtime":1610938234364,"results":"33","hashOfConfig":"26"},{"size":2640,"mtime":1610775771977,"results":"34","hashOfConfig":"26"},{"size":22863,"mtime":1611056999043,"results":"35","hashOfConfig":"26"},{"size":4279,"mtime":1610777235646,"results":"36","hashOfConfig":"26"},{"size":2108,"mtime":1611048089449,"results":"37","hashOfConfig":"26"},{"size":445,"mtime":1610777198141,"results":"38","hashOfConfig":"26"},{"size":5967,"mtime":1611057353842,"results":"39","hashOfConfig":"26"},{"size":1099,"mtime":1611030035489,"results":"40","hashOfConfig":"26"},{"size":2382,"mtime":1610777221666,"results":"41","hashOfConfig":"26"},{"size":634,"mtime":1611026282066,"results":"42","hashOfConfig":"26"},{"size":762,"mtime":1611042699550,"results":"43","hashOfConfig":"26"},{"size":599,"mtime":1611050048811,"results":"44","hashOfConfig":"26"},{"size":7162,"mtime":1611058400943,"results":"45","hashOfConfig":"26"},{"size":673,"mtime":1611047801093,"results":"46","hashOfConfig":"26"},{"size":170,"mtime":1611029950580,"results":"47","hashOfConfig":"26"},{"size":690,"mtime":1611041096940,"results":"48","hashOfConfig":"26"},{"size":48,"mtime":1611040513292,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"pp1pcx",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\reportWebVitals.js",[],["106","107"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\App.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\index.js",[],["108","109"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\MenuComponent.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\dishes.js",[],["110","111"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\DishDetailComponent.js",["112","113","114"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Label, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Stagger } from 'react-animation-components';\r\n\r\n\r\n//functional component implementation\r\nfunction RenderDish({ dish }) {\r\n  return (\r\n    <div className=\"col-12 col-md-5 m-1\">\r\n      <FadeTransform\r\n        in\r\n        transformProps={{\r\n          exitTransform: 'scale(0.5) translateY(-50%)'\r\n        }}>\r\n        <Card>\r\n          <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n          <CardBody>\r\n            <CardTitle>{dish.name}</CardTitle>\r\n            <CardText>{dish.description}</CardText>\r\n          </CardBody>\r\n        </Card>\r\n      </FadeTransform>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n//function RenderComments({ comms, addComment, dishId }) {\r\nfunction RenderComments({ comms, postComment, dishId }) {\r\n  if (comms != null) {\r\n    return (\r\n      <div className=\"col-12 col-md-5 m-1\">\r\n        <h4>Comments</h4>\r\n        <ul className=\"list-unstyled\">\r\n          <Stagger in>\r\n            {comms.map((comm) => {\r\n              return (\r\n                <li key={comm.id}>\r\n                  <p>{comm.comment}</p>\r\n                  <p>-- {comm.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comm.date)))}</p>\r\n                </li>\r\n              );\r\n            })}\r\n          </Stagger>\r\n        </ul>\r\n\r\n        {/* <CommentForm dishId={dishId} addComment={addComment} /> */}\r\n        <CommentForm dishId={dishId} postComment={postComment} />\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst DishDetail = (props) => {\r\n  if (props.isLoading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Loading />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.errMess) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h4>{props.errMess}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.dish != null) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <div className=\"col-12\">\r\n            <h3>{props.dish.name}</h3>\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <RenderDish dish={props.dish} />\r\n          <RenderComments comms={props.comments}\r\n            //addComment={props.addComment}\r\n            postComment={props.postComment}\r\n            dishId={props.dish.id} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false\r\n    };\r\n\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  toggleModal() {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen\r\n    })\r\n  }\r\n\r\n  handleSubmit(values) {\r\n    this.toggleModal();\r\n    // console.log(\"Current state is: \" + JSON.stringify(values));\r\n    // alert(\"Current state is: \" + JSON.stringify(values));\r\n\r\n    // this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Button outline onClick={this.toggleModal}>\r\n            <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment\r\n          </Button>\r\n        </div>\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n          <ModalBody>\r\n            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"rating\" md={5}>Rating</Label>\r\n                <Col md={10}>\r\n                  <Control.select model=\".rating\" id=\"rating\" name=\"rating\"\r\n                    className=\"form-control\" defaultValue={1}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                  </Control.select>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"author\" md={5}>Your Name</Label>\r\n                <Col md={10}>\r\n                  <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                    placeholder=\"Your Name\"\r\n                    className=\"form-control\"\r\n                    validators={{\r\n                      minLength: minLength(3), maxLength: maxLength(15)\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".author\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      minLength: 'Must be greater than 2 characters',\r\n                      maxLength: 'Must be 15 characters or less'\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"comment\" md={5}>Comment</Label>\r\n                <Col md={10}>\r\n                  <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                    rows=\"6\"\r\n                    className=\"form-control\" />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"form-group\">\r\n                <Col md={{ size: 10 }}>\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                                    </Button>\r\n                </Col>\r\n              </Row>\r\n            </LocalForm>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default DishDetail;\r\n\r\n\r\n/*\r\n//class component implementation\r\nclass DishDetail extends Component {\r\n\r\n  componentDidMount() {\r\n    console.log('DishDetail Component componentDidMount is invoked');\r\n}\r\n\r\ncomponentDidUpdate() {\r\n  console.log('DishDetail Component componentDidUpdate is invoked');\r\n}\r\n\r\n  renderDish(dish) {\r\n    console.log('DishDetail Component renderDish is invoked');\r\n\r\n    if (dish != null)\r\n      return (\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-md-5 m-1\">\r\n            <Card>\r\n              <CardImg width=\"100%\" top src={dish.image} alt={dish.name} />\r\n              <CardBody>\r\n                <CardTitle>{dish.name}</CardTitle>\r\n                <CardText>{dish.description}</CardText>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-12 col-md-5 m-1\">\r\n            <h4>Comments</h4>\r\n            {this.renderComments(dish.comments)}\r\n          </div>\r\n        </div>\r\n      );\r\n    else\r\n      return (\r\n        <div></div>\r\n      );\r\n  }\r\n\r\n  renderComments(comms) {\r\n    console.log('DishDetail Component renderComments is invoked');\r\n\r\n    return (\r\n      <ul className=\"list-unstyled\">\r\n        {comms.map((comm) => {\r\n          return (\r\n            <li key={comm.id}>\r\n              <p>{comm.comment}</p>\r\n              <p>-- {comm.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse( comm.date )))}</p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n\r\n  render() {\r\n    console.log('DishDetail Component render is invoked');\r\n    return (\r\n      <div className=\"container\">\r\n        {this.renderDish(this.props.dish)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DishDetail;\r\n*/","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\MainComponent.js",["115"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\HeaderComponent.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\FooterComponent.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\ContactComponent.js",["116","117","118","119","120","121","122","123"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors } from 'react-redux-form';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        // console.log(\"Current state is: \" + JSON.stringify(values));\r\n        alert(\"Current state is: \" + JSON.stringify(values));\r\n        this.props.postFeedback(values.firstname, values.lastname, values.telnum, values.email, values.agree, values.contactType, values.message);\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form postFeedback={this.props.postFeedback} feedId={this.props.feedId} model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                            /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n\r\n\r\n\r\n// //Previous code\r\n// import React, { Component } from 'react';\r\n// import { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n// class Contact extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             firstname: '',\r\n//             lastname: '',\r\n//             telnum: '',\r\n//             email: '',\r\n//             agree: false,\r\n//             contactType: 'Tel.',\r\n//             message: '',\r\n//             touched: {\r\n//                 firstname: false,\r\n//                 lastname: false,\r\n//                 telnum: false,\r\n//                 email: false\r\n//             }\r\n//         }\r\n\r\n//         this.handleSubmit = this.handleSubmit.bind(this);\r\n//         this.handleInputChange = this.handleInputChange.bind(this);\r\n//         this.handleBlur = this.handleBlur.bind(this);\r\n//     }\r\n\r\n//     handleInputChange(event) {\r\n//        const target = event.target;\r\n//        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n//        const name = target.name;\r\n\r\n//        this.setState({\r\n//            [name]: value\r\n//        });\r\n//     }\r\n\r\n//     handleSubmit(event) {\r\n//         console.log(\"Current state is: \" + JSON.stringify(this.state));\r\n//         alert(\"Current state is: \" + JSON.stringify(this.state));\r\n//         event.preventDefault(); //preventing the control to go to next page\r\n//     }\r\n\r\n//     handleBlur = (field) => (evt) => {\r\n//         this.setState({\r\n//             touched: {...this.state.touched, [field]: true}\r\n//         });\r\n//     }\r\n\r\n//     validate(firstname, lastname, telnum, email) {\r\n//         const errors = {\r\n//             firstname: '',\r\n//             lastname: '',\r\n//             telnum: '',\r\n//             email: ''\r\n//         };\r\n\r\n//         if (this.state.touched.firstname && firstname.length < 3) \r\n//             errors.firstname = 'First Name should be >= 3 characters';\r\n//         else if (this.state.touched.firstname && firstname.length > 10)\r\n//             errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n//         if (this.state.touched.lastname && lastname.length < 3)\r\n//             errors.lastname = 'Last Name should be >= 3 characters';\r\n//         else if (this.state.touched.lastname && lastname.length > 10)\r\n//             errors.lastname = 'Last Name should be <= 10 characters';\r\n\r\n//         const reg = /^\\d+$/;\r\n//         if (this.state.touched.telnum && !reg.test(telnum))\r\n//             errors.telnum = 'Tel. Number should contain only numbers';\r\n\r\n//         if(this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n//             errors.email = 'Email should contain a @';\r\n\r\n//         return errors;\r\n//     }\r\n\r\n\r\n//     render() {\r\n\r\n//         const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n\r\n//         return (\r\n//             <div className=\"container\">\r\n//                 <div className=\"row\">\r\n//                     <Breadcrumb>\r\n//                         <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n//                         <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n//                     </Breadcrumb>\r\n//                     <div className=\"col-12\">\r\n//                         <h3>Contact Us</h3>\r\n//                         <hr />\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"row row-content\">\r\n//                     <div className=\"col-12\">\r\n//                         <h3>Location Information</h3>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n//                         <h5>Our Address</h5>\r\n//                         <address>\r\n//                             121, Clear Water Bay Road<br />\r\n//                             Clear Water Bay, Kowloon<br />\r\n//                             HONG KONG<br />\r\n//                             <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n//                             <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n//                             <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n//                         </address>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n//                         <h5>Map of our Location</h5>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n//                         <div className=\"btn-group\" role=\"group\">\r\n//                             <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n//                             <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n//                             <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"row row-content\">\r\n//                     <div className=\"col-12\">\r\n//                         <h3>Send us your feedback</h3>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-md-9\">\r\n//                         <Form onSubmit={this.handleSubmit}>\r\n//                         <FormGroup row>\r\n//                                 <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"text\" id=\"firstname\" name=\"firstname\"\r\n//                                         placeholder=\"First Name\"\r\n//                                         value={this.state.firstname}\r\n//                                         valid={errors.firstname === ''}\r\n//                                         invalid={errors.firstname !== ''}\r\n//                                         onBlur={this.handleBlur('firstname')}\r\n//                                         onChange={this.handleInputChange} />\r\n\r\n//                                     <FormFeedback>{errors.firstname}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"text\" id=\"lastname\" name=\"lastname\"\r\n//                                         placeholder=\"Last Name\"\r\n//                                         value={this.state.lastname}\r\n//                                         valid={errors.lastname === ''}\r\n//                                         invalid={errors.lastname !== ''}\r\n//                                         onBlur={this.handleBlur('lastname')}\r\n//                                         onChange={this.handleInputChange} />\r\n\r\n//                                     <FormFeedback>{errors.lastname}</FormFeedback>\r\n//                                 </Col>                        \r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                             <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\r\n//                                         placeholder=\"Tel. number\"\r\n//                                         value={this.state.telnum}\r\n//                                         valid={errors.telnum === ''}\r\n//                                         invalid={errors.telnum !== ''}\r\n//                                         onBlur={this.handleBlur('telnum')}\r\n//                                         onChange={this.handleInputChange} />\r\n\r\n//                                     <FormFeedback>{errors.telnum}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"email\" md={2}>Email</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"email\" id=\"email\" name=\"email\"\r\n//                                         placeholder=\"Email\"\r\n//                                         value={this.state.email}\r\n//                                         valid={errors.email === ''}\r\n//                                         invalid={errors.email !== ''}\r\n//                                         onBlur={this.handleBlur('email')}\r\n//                                         onChange={this.handleInputChange} />\r\n\r\n//                                     <FormFeedback>{errors.email}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Col md={{size: 6, offset: 2}}>\r\n//                                     <FormGroup check>\r\n//                                         <Label check>\r\n//                                             <Input type=\"checkbox\"\r\n//                                                 name=\"agree\"\r\n//                                                 checked={this.state.agree}\r\n//                                                 onChange={this.handleInputChange} /> {' '}\r\n//                                             <strong>May we contact you?</strong>\r\n//                                         </Label>\r\n//                                     </FormGroup>\r\n//                                 </Col>\r\n//                                 <Col md={{size: 3, offset: 1}}>\r\n//                                     <Input type=\"select\" name=\"contactType\"\r\n//                                             value={this.state.contactType}\r\n//                                             onChange={this.handleInputChange}>\r\n//                                         <option>Tel.</option>\r\n//                                         <option>Email</option>\r\n//                                     </Input>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n//                                         rows=\"5\"\r\n//                                         placeholder=\"Enter text here\"\r\n//                                         value={this.state.message}\r\n//                                         onChange={this.handleInputChange}></Input>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Col md={{size: 10, offset: 2}}>\r\n//                                     <Button type=\"submit\" color=\"primary\">\r\n//                                         Send Feedback\r\n//                                     </Button>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                         </Form>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Contact;","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\comments.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\HomeComponent.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\promotions.js",[],["124","125"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\components\\AboutComponent.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\configureStore.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\leaders.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\dishes.js",[],["126","127"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\comments.js",["128"],"import { COMMENTS } from '../shared/comments';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\n\r\nexport const Comments = (state = {\r\n    errMess: null,\r\n    comments: []\r\n}, action) => {\r\n\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_COMMENTS:\r\n            return { ...state, errMess: null, comments: action.payload };\r\n\r\n        case ActionTypes.COMMENTS_FAILED:\r\n            return { ...state, errMess: action.payload };\r\n\r\n        case ActionTypes.ADD_COMMENT:\r\n            var comment = action.payload;\r\n            // comment.id = state.comments.length;\r\n            // comment.date = new Date().toISOString();\r\n            return {...state, comments: state.comments.concat(comment)};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\ActionCreators.js",["129","130"],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\leaders.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\forms.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\redux\\promotions.js",[],"C:\\NAVYA\\fullstackdev\\FullStack\\react-front-end\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"131","replacedBy":"135"},{"ruleId":"133","replacedBy":"136"},{"ruleId":"131","replacedBy":"137"},{"ruleId":"133","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":159,"column":19,"nodeType":"141","endLine":160,"endColumn":63},{"ruleId":"139","severity":1,"message":"142","line":173,"column":19,"nodeType":"141","endLine":179,"endColumn":21},{"ruleId":"139","severity":1,"message":"143","line":195,"column":19,"nodeType":"141","endLine":197,"endColumn":48},{"ruleId":"144","severity":1,"message":"145","line":39,"column":5,"nodeType":"146","messageId":"147","endLine":41,"endColumn":6},{"ruleId":"148","severity":1,"message":"149","line":62,"column":29,"nodeType":"141","endLine":62,"endColumn":71},{"ruleId":"139","severity":1,"message":"142","line":76,"column":37,"nodeType":"141","endLine":82,"endColumn":39},{"ruleId":"139","severity":1,"message":"142","line":98,"column":37,"nodeType":"141","endLine":104,"endColumn":39},{"ruleId":"139","severity":1,"message":"142","line":120,"column":37,"nodeType":"141","endLine":126,"endColumn":39},{"ruleId":"139","severity":1,"message":"142","line":143,"column":37,"nodeType":"141","endLine":149,"endColumn":39},{"ruleId":"139","severity":1,"message":"150","line":165,"column":45,"nodeType":"141","endLine":167,"endColumn":47},{"ruleId":"139","severity":1,"message":"140","line":173,"column":37,"nodeType":"141","endLine":174,"endColumn":66},{"ruleId":"139","severity":1,"message":"143","line":183,"column":37,"nodeType":"141","endLine":185,"endColumn":68},{"ruleId":"131","replacedBy":"151"},{"ruleId":"133","replacedBy":"152"},{"ruleId":"131","replacedBy":"153"},{"ruleId":"133","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":18},{"ruleId":"159","severity":1,"message":"160","line":116,"column":29,"nodeType":"161","messageId":"162","endLine":116,"endColumn":76},{"ruleId":"159","severity":1,"message":"160","line":122,"column":29,"nodeType":"161","messageId":"162","endLine":122,"endColumn":65},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],["163"],["164"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["163"],["164"],["163"],["164"],"no-unused-vars","'COMMENTS' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]